# server config
server:
  host: ${SERVER_HOST:localhost}
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_CONTEXT:/}
  tomcat:
    remoteip:
      remote_ip_header: ${SERVER_TOMCAT_REMOTE_IP_HEADER:x-forwarded-for}
      protocol_header: ${SERVER_TOMCAT_PROTOCOL_HEADER:x-forwarded-proto}
  max-http-request-header-size: 32000
  error:
    include-stacktrace: never

# Spring configuration
spring:
  sql:
    init:
      schema-locations: classpath:db/schema-${spring.sql.init.platform}.sql
      mode: always
      platform: ${JDBC_PLATFORM:h2}
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration
  batch:
    jdbc:
      initialize-schema: always
  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: update
    # database-platform: ${JDBC_DIALECT:org.hibernate.dialect.H2Dialect}
  datasource:
    driverClassName: ${JDBC_DRIVER:org.h2.Driver}
    password: ${JDBC_PASS:password}
    username: ${JDBC_USER:sa}
    url: ${JDBC_URL:jdbc:h2:file:./data/db}

  h2:
    console:
      enabled: ${H2_CONSOLE:false}


# Management Endpoints
management:
  server:
    port: ${MANAGEMENT_PORT:8081}
  endpoints:
    enabled-by-default: false
    web:
      base-path:
      exposure.include: "health,info,metrics"
  endpoint:
    info:
      enabled: true
    health:
      enabled: true


# Runtimes
runtime:
  nefertem:
    image: ${RUNTIME_NEFERTEM_IMAGE:ghcr.io/scc-digitalhub/digitalhub-sdk/wrapper-nefertem:latest}
  dbt:
    image: ${RUNTIME_DBT_IMAGE:ghcr.io/scc-digitalhub/digitalhub-sdk/wrapper-dbt:latest}
  mlrun:
    image: ${RUNTIME_MLRUN_IMAGE:ghcr.io/scc-digitalhub/digitalhub-core-wrapper-mlrun:latest}
  kfp:
    image: ${RUNTIME_KFP_IMAGE:ghcr.io/scc-digitalhub/digitalhub-core-wrapper-kfp:latest}
  python:
    images:
      PYTHON3_9: ${RUNTIME_PYTHON_IMAGE_3_9:ghcr.io/scc-digitalhub/digitalhub-serverless/python-runtime:3.9}
      PYTHON3_10: ${RUNTIME_PYTHON_IMAGE_3_10:ghcr.io/scc-digitalhub/digitalhub-serverless/python-runtime:3.10}
    command: /usr/local/bin/processor


# Spring Docs
springdoc:
  api-docs:
    path: /v1/api-docs

# Kaniko config
kaniko:
  image: ${KANIKO_IMAGE:gcr.io/kaniko-project/executor:latest}
  image-prefix: ${KANIKO_IMAGE_PREFIX:dhcore}
  image-registry: ${KANIKO_IMAGE_REGISTRY:${registry.name}}
  secret: ${KANIKO_SECRET:${registry.secret}}
  args: ${KANIKO_ARGS:}

# MLRun config
mlrun:
  base-image: ${MLRUN_BASE_IMAGE:mlrun/mlrun}
  image-prefix: ${MLRUN_IMAGE_PREFIX:dhcore}
  image-registry: ${MLRUN_IMAGE_REGISTRY:}

# registry
registry:
  name: ${DOCKER_REGISTRY:}
  secret: ${DOCKER_REGISTRY_SECRET:}


# Kubernetes
kubernetes:
  namespace: ${K8S_NAMESPACE:default}
  logs: ${K8S_ENABLE_LOGS:true}
  metrics: ${K8S_ENABLE_METRICS:true}
  # supported values for results: default,keep,disable
  results: ${K8S_ENABLE_RESULTS:default}
  security: 
    disable-root: ${K8S_SEC_DISABLE_ROOT:false}
  image-pull-policy: ${K8S_IMAGE_PULL_POLICY:IfNotPresent}
  init-image: ${K8S_INIT_IMAGE:ghcr.io/scc-digitalhub/digitalhub-core-builder-tool:latest}
  resources:
    cpu:
      requests: ${K8S_RESOURCE_CPU_DEFAULT:100m}
      limits: ${K8S_RESOURCE_CPU_LIMIT:}
    mem:
      requests: ${K8S_RESOURCE_MEM_DEFAULT:64m}
      limits: ${K8S_RESOURCE_MEM_LIMIT:}      
    gpu:
      key: ${K8S_RESOURCE_GPU_KEY:nvidia.com/gpu}
  config:
    config-map: ${DH_CONFIG_COMMON_MAPS:}
    secret: ${DH_CONFIG_COMMON_SECRETS:}
  templates: ${K8S_TEMPLATES:}
  envs:
    prefix: ${K8S_ENVS_PREFIX:${application.name}}

# Application endpoint
application:
  endpoint: ${DH_ENDPOINT:http://localhost:8080}
  name: @project.name@
  description: @project.description@
  version: @project.version@
  level: ${DH_API_LEVEL:}
  profiles: ${spring.profiles.active:default}


logging:
  level:
    ROOT: INFO
    it.smartcommunitylabdhub: ${LOG_LEVEL:INFO}

security:
  api:
    cors:
      origins: ${DH_CORS_ORIGINS:}
  basic:
    username: ${DH_AUTH_BASIC_USER:admin}
    password: ${DH_AUTH_BASIC_PASSWORD:}
  jwt:
    issuer-uri: ${DH_AUTH_JWT_ISSUER_URI:${security.oidc.issuer-uri}}
    audience: ${DH_AUTH_JWT_AUDIENCE:${security.oidc.issuer-uri}}
    claim: ${DH_AUTH_JWT_CLAIM:roles}
  oidc:
    issuer-uri: ${DH_AUTH_OIDC_ISSUER_URI:}
    client-id: ${DH_AUTH_OIDC_CLIENT_ID:}
    scope: ${DH_AUTH_OIDC_SCOPE:openid,email,profile}



# Conditional Configuration Cloud
event-queue:
  enabled: ${ENABLE_EVENTS:false}
  services:
    rabbit:
      connection:
        host: ${RABBITMQ_HOST:}
        port: ${RABBITMQ_PORT:}
        username: ${RABBITMQ_USER:}
        password: ${RABBITMQ_PASSWORD:}
        virtual-host: ${RABBITMQ_VHOST:/}
      queue-name: ${RABBITMQ_QUEUE:}
      entity-topic: ${RABBITMQ_TOPIC:entityTopic}
      entity-routing-key: ${RABBITMQ_ROUTING_KEY:entityRoutingKey}
      enabled: ${RABBITMQ_ENABLE:false}


# Managing monitors delay and other information
monitors:
  min-delay: 60
  delay: ${MONITORS_DELAY:60}

# Solr configuration
solr:
  enabled: ${ENABLE_SOLR:false}
  url: ${SOLR_URL:http://localhost:8983/solr}
  collection: ${SOLR_COLLECTION:dhcore}
  reindex: ${SOLR_REINDEX:never}

# files support
files:
  store:
    s3:
      access-key: ${AWS_ACCESS_KEY:}
      secret-key: ${AWS_SECRET_KEY:}
      endpoint: ${S3_ENDPOINT:}
      bucket: ${S3_BUCKET:}

# Keystore configuration
jwt:
  keystore:
    path: ${JWT_KEYSTORE_PATH:classpath:/keystore.jwks}
    kid: ${JWT_KEYSTORE_KID:}
  access-token:
    duration: ${JWT_ACCESS_TOKEN_DURATION:}
  refresh-token:
    duration: ${JWT_REFRESH_TOKEN_DURATION:}    
  client-id: ${JWT_CLIENT_ID:${security.basic.username}}
  client-secret: ${JWT_CLIENT_SECRET:${security.basic.password}}
  cache-control: ${JWKS_CACHE_CONTROL:public, max-age=900, must-revalidate, no-transform}