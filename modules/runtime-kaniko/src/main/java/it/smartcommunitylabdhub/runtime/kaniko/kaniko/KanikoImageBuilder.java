package it.smartcommunitylabdhub.runtime.kaniko.kaniko;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.github.cdimascio.dotenv.Dotenv;
import io.kubernetes.client.openapi.ApiClient;
import io.kubernetes.client.openapi.ApiException;
import io.kubernetes.client.openapi.apis.BatchV1Api;
import io.kubernetes.client.openapi.apis.CoreV1Api;
import io.kubernetes.client.openapi.models.*;
import it.smartcommunitylabdhub.runtime.kaniko.specs.docker.DockerfileGenerator;
import it.smartcommunitylabdhub.runtime.kaniko.specs.docker.DockerfileGeneratorFactory;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;

//////////////////////// TO USE THI BUILDER //////////////////////////////
// HelloWorld.java deve essere messo in /target path
//
// FROM {{baseImage}}
//
// # Add additional instructions here
// COPY HelloWorld.java /app
// WORKDIR /app
// RUN javac HelloWorld.java
//
// ENTRYPOINT ["java", "HelloWorld"]
//
//////////////////////////////////////
// DockerBuildConfiguration buildConfig = new DockerBuildConfiguration();
// buildConfig.setBaseImage("adoptopenjdk:11-jdk-hotspot");
// buildConfig.setEntrypointCommand("java HelloWorld");

// try {
//     DockerfileGenerator.generateDockerfile(buildConfig);
//     KanikoImageBuilder.buildDockerImage(buildConfig);
//     String image = "your-registry/your-image-name:tag"; // Specify the image generated by Kaniko
//     KubernetesJobGenerator.generateKubernetesJob(image);
// } catch (IOException e) {
//     e.printStackTrace();
// }
//
///////////////////////////////////////////////////////////////////////////

@Slf4j
public class KanikoImageBuilder {

    /**
     * Kaniko / Docker authentication.
     * Is used to push the image built by kaniko on hub.docker.io
     *
     * @return String
     */
    private static byte[] getDockerConfigJson() {
        Dotenv dotenv = Dotenv.configure().ignoreIfMissing().load();

        // Replace with your Docker Hub credentials
        String username = dotenv.get("DOCKER_USERNAME");
        String password = dotenv.get("DOCKER_PASSWORD");
        String email = dotenv.get("DOCKER_EMAIL");

        // Create the Docker config JSON
        Map<String, Object> auths = new HashMap<>();
        Map<String, String> auth = new HashMap<>();
        auth.put("username", username);
        auth.put("password", password);
        auth.put("email", email);
        auth.put("auth", Base64.getEncoder().encodeToString((username + ":" + password).getBytes()));
        auths.put("https://index.docker.io/v1/", auth);

        Map<String, Object> configData = new HashMap<>();
        configData.put("auths", auths);

        ObjectMapper objectMapper = new ObjectMapper();
        String json;
        try {
            json = objectMapper.writeValueAsString(configData);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Failed to create Docker config JSON.", e);
        }

        // Base64 encode the JSON
        return json.getBytes();
    }

    // [x]: DONE! this builder work for FOLDER strategy building.
    @Async
    public static CompletableFuture<?> buildDockerImage(
            ApiClient apiClient,
            DockerfileGeneratorFactory buildConfig,
            JobBuildConfig jobBuildConfig
    ) {
        CompletableFuture<Void> future = new CompletableFuture<>();
        CoreV1Api coreV1Api = new CoreV1Api(apiClient);
        BatchV1Api batchV1Api = new BatchV1Api(apiClient);

        try {

            // Docker file generator
            DockerfileGenerator dockerfileGenerator = DockerfileGeneratorFactory
                    .newInstance()
                    .from("openjdk:11")
                    .workdir("/app")
                    .copy(".", "/app")
                    .run("javac ./HelloWorld.java")
                    .entrypoint(List.of("java", "HelloWorld")).build();

            // Generate the Dockerfile
            //TODO here get the java function from function
            String dockerFileContent = dockerfileGenerator.generateDockerfile();
            String javaFile = Files.readString(
                    Path.of("/home/ltrubbiani/Labs/digitalhub-core/kubernetes/target/HelloWorld.java")
            );
            // Create ConfigMap
            V1ConfigMap configMap = new V1ConfigMap()
                    .data(Map.of("Dockerfile", dockerFileContent, "HelloWorld.java", javaFile))
                    .metadata(new V1ObjectMeta().name("config-map" + jobBuildConfig.getIdentifier()));

            coreV1Api.createNamespacedConfigMap("default", configMap, null, null, null, null);

            // Create Secret
            V1Secret dockerHubSecret = new V1Secret()
                    .metadata(new V1ObjectMeta().name("secret" + jobBuildConfig.getIdentifier()))
                    .type("kubernetes.io/dockerconfigjson")
                    .data(Map.of(".dockerconfigjson", getDockerConfigJson()));

            coreV1Api.createNamespacedSecret("default", dockerHubSecret, null, null, null, null);

            // Construct keyToPath
            V1KeyToPath keyToPath = new V1KeyToPath();
            keyToPath.setKey(".dockerconfigjson");
            keyToPath.setPath("config.json");

            // Configure Kaniko build
            V1Job job = new V1Job()
                    .metadata(new V1ObjectMeta().name("job" + jobBuildConfig.getIdentifier()))
                    .spec(
                            new V1JobSpec().template(
                                    new V1PodTemplateSpec().spec(new V1PodSpec()
                                            .initContainers(List.of(new V1Container()
                                                            .name("kaniko-init" + jobBuildConfig.getIdentifier())
                                                            .image("alpine:latest")
                                                            .volumeMounts(
                                                                    List.of(
                                                                            new V1VolumeMount().name("shared-dir").mountPath("/shared")
                                                                    )
                                                            )
                                                            .command(
                                                                    List.of(
                                                                            "sh",
                                                                            "-c",
                                                                            "wget " +
                                                                                    buildConfig.getSharedData() +
                                                                                    " -O /shared/data.tgz && tar xf /shared/data.tgz -C /shared"
                                                                    )
                                                            )
                                                    )
                                            )
                                            .containers(
                                                    List.of(
                                                            new V1Container()
                                                                    .name("kaniko-container" + jobBuildConfig.getIdentifier())
                                                                    .image("gcr.io/kaniko-project/executor:latest")
                                                                    .volumeMounts(
                                                                            List.of(
                                                                                    new V1VolumeMount()
                                                                                            .name("kaniko-config")
                                                                                            .mountPath("/build"),
                                                                                    new V1VolumeMount()
                                                                                            .name("kaniko-secret")
                                                                                            .mountPath("/kaniko/.docker"),
                                                                                    new V1VolumeMount().name("shared-dir").mountPath("/shared")
                                                                            )
                                                                    )
                                                                    .env(
                                                                            List.of(
                                                                                    new V1EnvVar()
                                                                                            .name("DOCKER_CONFIG")
                                                                                            .value("/kaniko/.docker")
                                                                            )
                                                                    )
                                                                    .command(
                                                                            List.of(
                                                                                    "/kaniko/executor",
                                                                                    "--dockerfile=/build/Dockerfile",
                                                                                    "--context=/build",
                                                                                    "--destination=ltrubbianifbk/dh" +
                                                                                            jobBuildConfig.getIdentifier() +
                                                                                            ":latest"
                                                                            )
                                                                    )
                                                    )
                                            )
                                            .volumes(
                                                    List.of(
                                                            new V1Volume().name("shared-dir"),
                                                            new V1Volume()
                                                                    .name("kaniko-config")
                                                                    .configMap(
                                                                            new V1ConfigMapVolumeSource()
                                                                                    .name("config-map" + jobBuildConfig.getIdentifier())
                                                                    ),
                                                            new V1Volume()
                                                                    .name("kaniko-secret")
                                                                    .secret(
                                                                            new V1SecretVolumeSource()
                                                                                    .secretName("secret" + jobBuildConfig.getIdentifier())
                                                                                    .items(List.of(keyToPath))
                                                                    )
                                                    )
                                            )
                                            .restartPolicy("Never")
                                    )
                            )
                    );

            batchV1Api.createNamespacedJob("default", job, null, null, null, null);

            try {
                // Wait for the build to complete
                batchV1Api.readNamespacedJobStatus("job" + jobBuildConfig.getIdentifier(), "default", null);
                boolean jobCompleted = false;
                long startTime = System.currentTimeMillis();
                long timeoutMillis = TimeUnit.MINUTES.toMillis(10);
                while (!jobCompleted && System.currentTimeMillis() - startTime < timeoutMillis) {
                    Thread.sleep(5000); // Adjust the delay as needed
                    V1Job v1Job = batchV1Api.readNamespacedJobStatus(
                            "job" + jobBuildConfig.getIdentifier(),
                            "default",
                            null
                    );
                    if (
                            v1Job != null &&
                                    v1Job.getStatus() != null &&
                                    v1Job.getStatus().getSucceeded() != null &&
                                    v1Job.getStatus().getSucceeded() > 0
                    ) {
                        jobCompleted = true;
                    }
                }
                if (!jobCompleted) {
                    log.info("Docker image build failed or timed out.");
                } else {
                    log.info("Docker image build completed successfully.");
                }
            } catch (ApiException | InterruptedException e) {
                log.error("Error while waiting for the build to complete: " + e.getMessage());
            }

            try {
                // Cleanup the resources
                batchV1Api.deleteNamespacedJob(
                        "job" + jobBuildConfig.getIdentifier(),
                        "default",
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                );

                coreV1Api.deleteNamespacedConfigMap(
                        "config-map" + jobBuildConfig.getIdentifier(),
                        "default",
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                );
                coreV1Api.deleteNamespacedSecret(
                        "secret" + jobBuildConfig.getIdentifier(),
                        "default",
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                );
            } catch (ApiException e) {
                log.error("Error while cleaning up resources: " + e.getMessage());
            }

            future.complete(null); // Indicate successful completion
        } catch (IOException | ApiException e) {
            log.error("Error occurred during Docker image build: " + e.getMessage());
            future.completeExceptionally(e); // Indicate completion with an exception
        }

        return future;
    }
}
